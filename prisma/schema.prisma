// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "sqlite"
    // NOTE: When using postgresql, mysql or sqlserver, uncomment the @db.text annotations in model Account below
    // Further reading: 
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

// model Example {
//     id String @id @default(cuid())
// }

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? //@db.Text
    access_token      String? //@db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? //@db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id              String    @id @default(cuid())
    name            String?
    email           String   @unique
    emailVerified   DateTime?
    image           String?   // might not need this
    country         String    // a part of registration
    state           String    // a part of registration
    unitPref        String?   // a part of registration
    accounts        Account[] // next auth related
    sessions        Session[] // next auth related
    vehicles        Vehicle[]
    electricityUse  ElectricityUse[]
    fuelUsed        FuelUsed[]
    flights         Flight[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model Trips {
    id                  String      @id @default(cuid())
    distanceTraveled    DateTime
    vehicleId           String
    vehicle             Vehicle     @relation(fields: [vehicleId], references: [id], onDelete: Cascade)
}

model Vehicle {
    id              String      @id @default(cuid())
    vehicleMakeId   String
    vehicleModelId  String
    userId          String
    createdAt       DateTime    @default(now())
    user            User        @relation(fields: [userId], references: [id], onDelete: Cascade)
    trips           Trips[]
}

model ElectricityUse {
    id              String      @id @default(cuid())
    electricalValue Decimal
    userId          String
    createdAt       DateTime    @default(now())
    user            User        @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model FuelUsed {
    id          String      @id @default(cuid())
    fuelType    String
    fuelUnit    String
    amountUsed  Decimal
    createdAt   DateTime    @default(now())
    userId      String
    user        User        @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Flight {
    id          String      @id @default(cuid())
    partySize   Decimal     @default(1)
    createdAt   DateTime    @default(now())
    userId      String
    user        User        @relation(fields: [userId], references: [id], onDelete: Cascade)
    flightLeg   FlightLeg[]
}

model FlightLeg {
    id          String  @id @default(cuid())
    departure   String
    destination String
    legNumber   Decimal
    flightId    String
    flight      Flight  @relation(fields: [flightId], references: [id], onDelete: Cascade)
}