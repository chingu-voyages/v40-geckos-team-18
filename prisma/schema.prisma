// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider        = "prisma-client-js"
    previewFeatures = ["referentialIntegrity"]
}

datasource db {
    provider             = "mysql"
    // NOTE: When using postgresql, mysql or sqlserver, uncomment the @db.text annotations in model Account below
    // Further reading: 
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url                  = env("DATABASE_URL")
    referentialIntegrity = "prisma"
}

// Necessary for Next auth
model Account {
    id                       String  @id @default(cuid())
    userId                   String
    type                     String
    provider                 String
    providerAccountId        String
    refresh_token            String? @db.Text
    refresh_token_expires_in Int? 
    access_token             String? @db.Text
    expires_at               Int?
    token_type               String?
    scope                    String?
    id_token                 String? @db.Text
    session_state            String?
    user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id               String           @id @default(cuid())
    name             String?
    email            String           @unique
    emailVerified    DateTime?
    image            String? // might not need this
    country          String? // a part of registration
    state            String? // a part of registration
    unitPref         String @default("metric") // a part of registration
    accounts         Account[] // next auth related
    sessions         Session[] // next auth related
    vehicles         Vehicle[]
    electricityUse   ElectricityUse[]
    fuelUsed         FuelUsed[]
    flights          Flight[]
    primaryVehicleId String?
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model Trip {
    id               String   @id @default(cuid())
    distance_value   Decimal // user input
    distance_unit    String // user input
    estimated_at     DateTime // response from Carbon
    carbon_g         Int // response from Carbon will have this field
    vehicleId        String
    vehicle          Vehicle  @relation(fields: [vehicleId], references: [id], onDelete: Cascade)
}

model Vehicle {
    id               String   @id @default(cuid())
    vehicle_make     String
    vehicle_model    String
    vehicle_year     Int
    vehicle_model_id String   // use for Carbon API when making calls. Comes from Carbon as well.
    created_at       DateTime @default(now())
    userId           String   
    user             User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    trips            Trip[]
}

model ElectricityUse {
    id                String   @id @default(cuid())
    electricity_value Decimal // user input
    electricity_unit  String // user input
    estimated_at      DateTime // response from Carbon
    carbon_g          Int // response from Carbon will have this field
    userId            String
    user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model FuelUsed {
    id                  String   @id @default(cuid())
    fuel_source_type    String // user input
    fuel_source_unit    String // user input
    fuel_source_value   Decimal // user input
    estimated_at        DateTime // response from Carbon
    carbon_g            Int // response from Carbon will have this field   
    userId              String
    user                User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Flight {
    id             String      @id @default(cuid())
    passengers     Int         @default(1) // user input
    estimated_at   DateTime // response from Carbon
    carbon_g       Int // response from Carbon will have this field
    distance_value Decimal // response from Carbon
    distance_unit  String
    userId         String
    user           User        @relation(fields: [userId], references: [id], onDelete: Cascade)
    flightLeg      FlightLeg[]
}

model FlightLeg {
    id                  String @id @default(cuid())
    departure_airport   String // user input: IATA code
    destination_airport String // user input: IATA code
    legNumber           Int // user input: can be 1,2,3,etc
    cabin_class         String @default("economy") // user input
    flightId            String
    flight              Flight @relation(fields: [flightId], references: [id], onDelete: Cascade)
}
